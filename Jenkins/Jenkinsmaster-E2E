pipeline{
   agent {
       docker {
             image 'harimaumalaya:v0.0.1j'
             label 'docker'
             registryUrl 'https://046099537821.dkr.ecr.us-east-1.amazonaws.com'
	     args '-v $WORKSPACE:/var/tmp'
	     args '-u root'

       }
   }   
   
   	environment {
        Linux_host = credentials('Linux')
        username = "${Linux_host_USR}"
        password = "${Linux_host_PSW}"
	GIT_TOKEN = credentials('sashangit')
	
        Windows_host = credentials('sqldefault')
        win_username = "${Windows_host_USR}"
        win_password = "${Windows_host_PSW}"
    }
   
   stages {
	
      stage('Install Ansible'){
            steps{
		script{  
                 sh """
                    apt-get install -y ansible
		    pip install openpyxl
                    pip install boto3
                    ls -ltr /usr/bin/*
                    ansible --version
                    which pip
                    which python
                    python3 -m pip install boto3
		    pwd
		    ls -ltr
                    """
            }
	    }
     }
   
        stage('Creating inventory') {
            steps {
                script {
			
                          sh '''
				ansible-playbook -i inventory_winpatch -e  "username=$username" -e "password=$password" excel2inventory.yml
				ls -lart
				cat ansible_inventory.ini 
			        ansible-playbook -i ansible_inventory.ini -e  "username=$username" -e "password=$password" pingtest.yml
				ansible-playbook -i ansible_inventory.ini -e  "username=$win_username" -e "password=$win_password"  win_ping.yml
				ansible-playbook -i rhsa_precheckpass -e  "username=$username" -e "password=$password" -e "GIT_TOKEN=$GIT_TOKEN" remotestore.yml
                              '''
            }
            }
            }
	   
     stage('Trigger prechecks') {
            parallel{
                stage('Linux E2E') {
                    steps {
                       build job: "Linux/Linux-E2E", wait: true
                    }        
                    
                }
                
                stage('Windows E2E') {
                    steps {
                        build job: "Windows/Windows-E2E", wait: true
                    }
                    
                }
            }
             
            
        }  
        
}
}
